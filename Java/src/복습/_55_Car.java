package 복습;

public abstract class _55_Car {
	
	/*
	 * 추상이란?
	 * - 여러가지 사물이나 개념으로부터 공통이 되어 특성을 파악하는 것을 말한다.
	 * - 구체적이지 않고 막연한 것을 말한다.
	 * 
	 * 면 접 잘 나 옴
	 * 1. 추상클래스
	 * - 하나 이상의 추상메소드를 가지고 있는 클래스를 의미한다.
	 * - abstract 키워드를 이용하여 구현되지 않는 추상메소드를 기술 할 수 있다.
	 * - 자식클래스에게 구현을 위함하고자 할 떄 사용되며, 프로그램의 확장성을 위해 많이 사용하는 설계방법이다\
	 * - 추상클래스는 일반메소드, 추상메소드 모두 올 수 있다.
	 * - 전제조건은 상속을 해야 한다.
	 * - abstract 상위클래스에서는 하위 클래스도 공통으로 사용할 메소드를 구현하고 - 일반메소드(concrete 메소드)
	 * 	하위 클래스마다 다르게 구현할 메소드는 추상메소드로 선언해둔다. - 추상메소드
	 * - 추상메소드를 상속받은 하위클래스는 구현되지 않는 추상메소드를 모두 구현해야 구체적인 클래스가 된다.
	 * 
	 * 문법 : public abstract class 클래스명{
	 * 			public abstract void 메소드명();
	 * 		}
	 * 
	 * 2. 추상메소드
	 * - 클래스를 구현할 때, 몸체를 구현하지 않고 abstract예약어를 사용하여 선언만 하는 메소드이다.
	 * 
	 * 3. 추상클래스의 상속
	 * - 추상클래스를 상속받는 자식클래스는 추상메소드를 반드시 재정의해야 하며, 재정의하지 않으면 컴파일 오류가 발생
	 * - 자식클래스에게 강제성과 통일성을 줄 수 있다.
	 * 
	 * 4. 추상클래스의 객체 생성
	 * - 추상클래스는 객체를 생성할 수 없으며, 상속계층에서 추상적인 개념을 나태내기 위한 용도로 사용된다.
	 * 	(구현된 코드가 없으므로 수행할 수 있는 내용이 없으므로 추상클래스는 인스턴스를 생성할 수 없다.)
	 * - 상속을 통하여 자식클래스에서 추상메소드를 구현하고, 자식클래스 객체를 생성하여 메소드를 접근할 수 있다.
	 */
	public abstract void drive();
	public abstract void stop();
	
	public void startCar() {
		System.out.println("시동을 켭니다.");
	}
	public void turnOff() {
		System.out.println("시동을 끕니다.");
		
	}
	//템플릿 메소드 : 틀이 있는 메소드이며, 재정의 되지 않도록 final로 선언
	//자동차가 달리는 방법을 순서대로 구현
	final public void run() {
		startCar();
		drive();
		stop();
		turnOff();
	}
}
